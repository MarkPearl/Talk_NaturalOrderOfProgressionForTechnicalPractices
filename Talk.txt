## Introduction ##

When I had my thirteenth birthday, my parents bought me a skateboard. This wasn't your ordinary plain shaped skateboard. The deck on this skateboard was what we would call a cruizer deck. It was aerodynamic and was about the coolest thing a thirteen year-old had ever seen. Entering teen hood, and having just been given the worlds most amazing skateboard, I resolved that I would become the world's greatest skateboarder.

First, I attempted doing skateboard tricks - airs, backsides, kickflips, ollies etc. I was no good at tricks - in fact I was well below par average. Having failed at tricks, I came up with an alternate plan to reach this goal - what I lacked in ability I would make up in speed - I would be known as the world most famous skateboard luge. With this new found hope of achieving my goal, I set out to find an appropriate hill to ride. Having grown up in KwaZulu Natal, in a place called Forest Hills, I was in no shortage of "good" hills. In fact, about a block away from my house was Regent Rd - which was a recently tarred road running down a steep hill.

I remember this event to this day. It was late Janruary afternoon, my brothers and I walked to the top of the top of Regent road where I bravely stood for a few moments before pushing off on my skateboard down the hill. About 10 seconds into the ride and about 5 meters down I realized I hadn't really thought this through - My skateboard was doing really well in picking up speed rapidly, however in my haste for world fame I had not thought of putting on any protective gear (in fact I didn't own any) and the logistics of what would happen when I reached the bottom of the hill had not been planned properly. You see, Regent road comes to an abrupt stop at the bottom of the hill as it reaches a T junction - with a the occaisonal car driving along the other road with no view of anyone coming down regent road. 

As these thoughts set in and my speed rapidly increased I made probably the first good decision that day - I jumped off my board. As I jumped off, my world went into slow motion - the skateboard which had just seconds before been under my feet, continued for a few meters down the hill until veered off and crashed into bushes on the side of the road. I also continued down the road for a few meters - with no protective equipment I had to rely on my bare hands and knees to stop the rest of my body from getting any major injuries. The momentum of my trip dragged me on the tar for a few meters until I came to a stop. Standing up and looking down at my hands and knees I realized that where moments ago there was healthy skin, there was now replaced blood and flesh. That was to be one of the shortest careers a skateboarder would ever have. I just wasn't ready for that kind of speed.

In my professional career of developing software I've seen and heard of many organizations doing exactly the same thing that I did on my skateboard that day. These organizations want to develop software faster - they've figuratively bought the agile skateboard - they've sent everyone on an agile course, put up a scrum board and are doing daily stand ups - but they missed something really important. They have not adjusted their engineering practices to handle the speed they want to travel and so they start the ride but end up getting bloody hands and knees.

So, how did this become such a common problem? In my opinion, it is partly a side effect of two of the most popular agile methodologies in circulation - Scrum and Kanban. Neither of these methodologies specify any specific engineering practices to adopt when applying them. This is both useful and dangerous. It's useful because it keeps these methodologies light weight which makes them easier to learn. It dangerous because when an organization, which is meaning well, is still trying to figure things out tries to become agile it sends its people on a scrum or kanban course and then ticks the agile box, not realizing that there are additional skills and practices they need to adjust to go fast safely. Today I'm going to speak briefly on the agile technical practices that help teams go faster.

## What are agile technical practices ##

So, what do I mean by agile technical practices? I understand that these words mean different things for different people. In fact, this became very apparent when I asked the question on twitter. For this session, I'm going to ask your endulgance in using my definition - which is that I am referring to the engineering practices related to creating software in an agile environment. Some of the things I would include under the banner of engineering practices are: Pair Programming, Mob Programming, Continous Integration, Continous Deployment, Acceptance Test Driven Development, Collective Code Ownership, Collective Coding Standards, Simple Design and Refactoring.

## Two questions to ask ##

So, let's say you are in a team that is currently developing software and your team is not applying any of these practices, which practice would you start with? Unfortunately there isn't a definative answer. It really depends on your situation, the individuals in the team and their existing skillset. With that said, I believe there are a few good questions you can ask to help you come up with your own adoption plan.

The two questions I like to ask in this situaiton are:
- How fast are you currently going?
- How fast do you want to go?
- How much slack can you create?

## How are you currently going and how fast do you want to go? ##

Let me deal with the first two questions together. How fast are you currently going and how fast do you want to go are really important questions to answer. The bigger the jump you want to make in speed, the more upfront pain you are going to experience.

The speed you want to go largely effects the structure of your team and the practices you embrace. 

It is naive to expect a team that was previously releasing software to production once every six months can suddenly move to delivering to production once every two week without massive organizational support for two main reasons:

1. Different speeds require different team structures. The team structure required for a group to release to production once every six months is very different to the team structure required for a team to release to production once a month.

2. Organizational stuctures tend to be self supporting. By this I mean, when you change a team structure, you end up changing an organizational structures, it is my experience that while this may be the right thing, unless the existing structure has been properly prepared, it will resist this change.



The scenario I came up with is as follows: There is a group that has been releasing software occaisonally. The group is called the Dev team - they consist of 8 developers and one dev manager. The Dev teams responsibility is to maintain a legacy system that business has been using for the last ten years. Because the business uses the system for everything, they are always wanting additional features added to the system. They do this via logging projects. If a project is really large it gets assigned a business analyst who generates the requirements, otherwise it is investigated by the Dev Manager who assigns the work. When work comes in a devleoper in our group is assigned the work based on the area of the system it effects. For instance, Gill is the expert for invoicing and handles any work related to that aspect of the solution, Mike handles amortization schedules, Bob handles all Foo requests. We try and release every quarter, but getting things ready for production is a lot of work and so Dave who does the release package usually only gets an acceptable version out after a few weeks of going back and forth between the testers. The team works hard, but is always under pressure from business who is putting pressure on getting delivery of features.

So, I'm interested to find out, who at some stage in the career has worked in this team or a team similar to this

So where do we start?


I am going to deal with these first before I outline the practices:


So, a few things I want to set out
- every practice has a jcurve (when learning something new, productivity dips before it improves)
- some practices return minimum value unless coupled with other practices
- practices need to be sustainable during pressure situations (teams without these practices are often in pressure situaitons a lot)

With that said, I know that every team is a unique snow flake. I understand that what I will be sharing might not map one to one with your teams exact situation. I would love to find out the specifics of the pain you are facing afterwards.


How much slack does your team have? When I talk about slack, I am refering to the time a team has to improving their process and upskilling. Having slack is vital to adopting new practices. Teams that don't have slack do not have capacity to change. Having slack built in as a regular cadence into your process is vital for continued improvement. I'm a proponent of teams doing intential improvement on at worst a weekly cadence.

The first thing I like to find out from a team is how often they are releasing to production?

Generally I find teams release to production a lot less frequently than they should. For a lot of teams it is once every few months. 


Essentially when I am developing software I want feedback at every level. The quicker the feedback the better. I want feedback when I am solving a problem to know if it is the right problem to solve. I want feedback when I am coding to know if my approach is right. I want feedback when I release to know if everything is working properly. The quicker I can get this feedback, the better position I am in.


First we need to decide how fast we want to go. I watched a wonderful talk done by Kent Beck on GForces and how teams change shape depending on their speed. Determining how fast you want to go


So where do we start?

The first technical practice I would like to promote is build automation. Build automation is the act of scripting or automating a wide variety of tasks that software developers do in their day-to-day activities. Anything related to compiling, packaging binaries, 

The first technical practice I would like to promote is collective code ownership.
For those that are unfamiliar with the term, collective code ownership means that everyone is responsible for all the code. This in return means that everyone is allowed to change any part of the code.
I have sometime seen people confusing version control with collective code ownership. Just because your team has their code in version control does not mean there is collective code ownership - I have seen teams have a large solution, where inside that solution they had a folder for each developer, under which they had a copy of the code. This is not collective ownership. 


Good to know
- Every practice has a J curve - can you afford to have the downtime
- Some practices return minimum value unless coupled with other practices
- Should be able to sustain practices during pressure situationo
- Legacy system testing

Other things
- Manual testing slows things down
- Learn your refactoring tools

What are agile engineering rpactices
- TDD,
- Pairing,
- Continous Integration
- Continous Deployment
- Acceptance Test Driven Developement

When it is expensive to make something, you do it less frequently. When it is cheap, you do it more often

At a principle level what we are looking for is... any practice that helps shorten feedback loops and promote sustainable pace.

## Definition ##

Engineering Practice is a specific software development practice that is proposed to be implemented by agile method.


Many think Agile is just about stand-ups & sticky notes when it is actually about being able to deliver valuable software faster. It is impossible to do this if you don't leverage the technical practices agile has embraced. The challenge is - where do you start? Do you focus your energy on understanding TDD, or put time into a continuous build environment. What is the natural order of progression and how do you implement them without slowing down feature delivery?

In this session Mark is going to present what he believes is the natural order of progression of technical practices. He will highlight some of the challenges he's faced with teams trying to increase their release rate and what they did to overcome these barriers.

This talk is appropriate for technical AND non-technical people involved in Software Development who would like to release to production more frequently (be it from Months to Weeks, Weeks to Days, or Days to Hours). Those already hitting the magical continuous release rate don't need to attend ;-)
## How is your topic relevant to an African context ##

## Keywords ##

TDD, 
Automated Deployment, 
Continuous Integration, 
Version Control, 
Automated Testing, 
Deliver Faster

## Learning Outcomes ##
Understand the order of implementing technical practices
Understand why each technical practice is valuable
Understand how long each technical practice usually takes to embrace or see a return on
Debunk potential myths on why one technical practice will solve all your problems

References - Agile Engineering Practices (http://blogs.versionone.com/agile_management/2013/07/10/agile-engineering-practices-a-cheat-sheet/)  

Potential Engineering Practices
- Pair Programming
- Test Driven Design
- Automated Acceptance Testing
- Refactoring
- Emergent Design
- Continuous Integration
- Shared code repository

References - Agile Egineering Best Practices - http://www.slideshare.net/RichardChengExcella/agile-engineering-best-practices-what-every-project-manager-should-know?next_slideshow=1

Do this first...
- Version control
- Build automation
- Automated unit testing
- Continous integration
- Static code analysis
- Dependency Management
- Automated integration testing
- Automated acceptance testing
- Deployment automation

References - Benefit of agile engineering practices - http://www.infoq.com/articles/benefit-agile-engineering

https://blog.codecentric.de/en/2014/05/agile-engineering-practices-short-overview/

Videos on egile engineering practices
http://shop.oreilly.com/product/0636920020271.do

Why did we lose the XP practices (https://coding.abel.nu/2014/04/why-did-we-lose-the-xp-practices/)

https://www.scrumalliance.org/community/articles/2010/december/the-land-that-scrum-forgot

Uncle bob's idea of engineering practices include:
- TDD, Continuous Integration, Pair Programming, Collective Ownership & Refactoring

Uncle bob feels TDD is the best to start with - it helps make the code clean

## My Quotes ##

If you want to move faster without getting hurt, the people that are creating your software not only need to adjust how they interact - they also need to adjust their engineering practices that they use that makes it safe to move faster. 
